// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/apigrpc/services/forecast.proto

package services

import (
	context "context"
	fmt "fmt"
	forecast "github.com/danilvpetrov/weathersource/api/forecast"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ForecastRequest is the request to query the latest weather forecast data.
type ForecastRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForecastRequest) Reset()         { *m = ForecastRequest{} }
func (m *ForecastRequest) String() string { return proto.CompactTextString(m) }
func (*ForecastRequest) ProtoMessage()    {}
func (*ForecastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be56d2eab663686e, []int{0}
}

func (m *ForecastRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForecastRequest.Unmarshal(m, b)
}
func (m *ForecastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForecastRequest.Marshal(b, m, deterministic)
}
func (m *ForecastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastRequest.Merge(m, src)
}
func (m *ForecastRequest) XXX_Size() int {
	return xxx_messageInfo_ForecastRequest.Size(m)
}
func (m *ForecastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastRequest proto.InternalMessageInfo

// ForecastResponse is the response with the latest weather forecast data.
type ForecastResponse struct {
	Forecast             *forecast.Forecast `protobuf:"bytes,1,opt,name=forecast,proto3" json:"forecast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ForecastResponse) Reset()         { *m = ForecastResponse{} }
func (m *ForecastResponse) String() string { return proto.CompactTextString(m) }
func (*ForecastResponse) ProtoMessage()    {}
func (*ForecastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be56d2eab663686e, []int{1}
}

func (m *ForecastResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForecastResponse.Unmarshal(m, b)
}
func (m *ForecastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForecastResponse.Marshal(b, m, deterministic)
}
func (m *ForecastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastResponse.Merge(m, src)
}
func (m *ForecastResponse) XXX_Size() int {
	return xxx_messageInfo_ForecastResponse.Size(m)
}
func (m *ForecastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastResponse proto.InternalMessageInfo

func (m *ForecastResponse) GetForecast() *forecast.Forecast {
	if m != nil {
		return m.Forecast
	}
	return nil
}

func init() {
	proto.RegisterType((*ForecastRequest)(nil), "weathersource.api.grpc.services.forecast.ForecastRequest")
	proto.RegisterType((*ForecastResponse)(nil), "weathersource.api.grpc.services.forecast.ForecastResponse")
}

func init() {
	proto.RegisterFile("api/apigrpc/services/forecast.proto", fileDescriptor_be56d2eab663686e)
}

var fileDescriptor_be56d2eab663686e = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2c, 0xc8, 0x4c, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d,
	0xd6, 0x4f, 0xcb, 0x2f, 0x4a, 0x4d, 0x4e, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xd2, 0x28, 0x4f, 0x4d, 0x2c, 0xc9, 0x48, 0x2d, 0x2a, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x4b,
	0x2c, 0xc8, 0xd4, 0x03, 0xa9, 0xd7, 0x83, 0xa9, 0xd7, 0x83, 0xa9, 0x97, 0x92, 0x06, 0x19, 0x07,
	0xe3, 0xa1, 0x19, 0xa3, 0x24, 0xc8, 0xc5, 0xef, 0x06, 0x15, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x51, 0x0a, 0xe1, 0x12, 0x40, 0x08, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x39, 0x70,
	0x71, 0xc0, 0x34, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0xa9, 0xe8, 0x61, 0x3a, 0x00, 0x6e,
	0x36, 0x5c, 0x3f, 0x5c, 0x97, 0x51, 0x07, 0x23, 0x17, 0x07, 0x4c, 0x58, 0xa8, 0x86, 0x8b, 0xd9,
	0x3d, 0xb5, 0x44, 0xc8, 0x52, 0x8f, 0x58, 0x4f, 0xe8, 0xa1, 0x39, 0x52, 0xca, 0x8a, 0x1c, 0xad,
	0x10, 0xcf, 0x38, 0xd9, 0x44, 0x59, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7,
	0xea, 0xa7, 0x24, 0xe6, 0x65, 0xe6, 0x94, 0x15, 0xa4, 0x96, 0x14, 0xe5, 0x97, 0xe9, 0xa3, 0x18,
	0xaa, 0x8f, 0x2d, 0x1e, 0x92, 0xd8, 0xc0, 0x01, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0x8e, 0xc9, 0xc8, 0xa6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ForecastClient is the client API for Forecast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForecastClient interface {
	// Get retrieves the latest weather forecast from the forecast service API.
	Get(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)
}

type forecastClient struct {
	cc *grpc.ClientConn
}

func NewForecastClient(cc *grpc.ClientConn) ForecastClient {
	return &forecastClient{cc}
}

func (c *forecastClient) Get(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {
	out := new(ForecastResponse)
	err := c.cc.Invoke(ctx, "/weathersource.api.grpc.services.forecast.Forecast/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForecastServer is the server API for Forecast service.
type ForecastServer interface {
	// Get retrieves the latest weather forecast from the forecast service API.
	Get(context.Context, *ForecastRequest) (*ForecastResponse, error)
}

// UnimplementedForecastServer can be embedded to have forward compatible implementations.
type UnimplementedForecastServer struct {
}

func (*UnimplementedForecastServer) Get(ctx context.Context, req *ForecastRequest) (*ForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterForecastServer(s *grpc.Server, srv ForecastServer) {
	s.RegisterService(&_Forecast_serviceDesc, srv)
}

func _Forecast_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForecastServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weathersource.api.grpc.services.forecast.Forecast/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForecastServer).Get(ctx, req.(*ForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Forecast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weathersource.api.grpc.services.forecast.Forecast",
	HandlerType: (*ForecastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Forecast_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/apigrpc/services/forecast.proto",
}
