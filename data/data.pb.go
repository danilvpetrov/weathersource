// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: data/data.proto

package data

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataType int32

const (
	DataType_UNKNOWN  DataType = 0
	DataType_CURRENT  DataType = 1
	DataType_MINUTELY DataType = 2
	DataType_HOURLY   DataType = 3
	DataType_DAILY    DataType = 4
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CURRENT",
		2: "MINUTELY",
		3: "HOURLY",
		4: "DAILY",
	}
	DataType_value = map[string]int32{
		"UNKNOWN":  0,
		"CURRENT":  1,
		"MINUTELY": 2,
		"HOURLY":   3,
		"DAILY":    4,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_data_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_data_data_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_data_data_proto_rawDescGZIP(), []int{0}
}

// Data is the collection of weather information received from
// https://api.darksky.net.
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                        DataType `protobuf:"varint,1,opt,name=type,proto3,enum=weathersource.data.DataType" json:"type,omitempty"`
	Latitude                    float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                   float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Timezone                    string   `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	ApparentTemperatureHigh     float64  `protobuf:"fixed64,5,opt,name=apparent_temperature_high,json=apparentTemperatureHigh,proto3" json:"apparent_temperature_high,omitempty"`
	ApparentTemperatureHighTime int64    `protobuf:"varint,6,opt,name=apparent_temperature_high_time,json=apparentTemperatureHighTime,proto3" json:"apparent_temperature_high_time,omitempty"`
	ApparentTemperatureLow      float64  `protobuf:"fixed64,7,opt,name=apparent_temperature_low,json=apparentTemperatureLow,proto3" json:"apparent_temperature_low,omitempty"`
	ApparentTemperatureLowTime  int64    `protobuf:"varint,8,opt,name=apparent_temperature_low_time,json=apparentTemperatureLowTime,proto3" json:"apparent_temperature_low_time,omitempty"`
	ApparentTemperatureMax      float64  `protobuf:"fixed64,9,opt,name=apparent_temperature_max,json=apparentTemperatureMax,proto3" json:"apparent_temperature_max,omitempty"`
	ApparentTemperatureMaxTime  int64    `protobuf:"varint,10,opt,name=apparent_temperature_max_time,json=apparentTemperatureMaxTime,proto3" json:"apparent_temperature_max_time,omitempty"`
	ApparentTemperatureMin      float64  `protobuf:"fixed64,11,opt,name=apparent_temperature_min,json=apparentTemperatureMin,proto3" json:"apparent_temperature_min,omitempty"`
	ApparentTemperatureMinTime  int64    `protobuf:"varint,12,opt,name=apparent_temperature_min_time,json=apparentTemperatureMinTime,proto3" json:"apparent_temperature_min_time,omitempty"`
	Temperature                 float64  `protobuf:"fixed64,13,opt,name=temperature,proto3" json:"temperature,omitempty"`
	ApparentTemperature         float64  `protobuf:"fixed64,14,opt,name=apparent_temperature,json=apparentTemperature,proto3" json:"apparent_temperature,omitempty"`
	CloudCover                  float64  `protobuf:"fixed64,15,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	DewPoint                    float64  `protobuf:"fixed64,16,opt,name=dew_point,json=dewPoint,proto3" json:"dew_point,omitempty"`
	Humidity                    float64  `protobuf:"fixed64,17,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Icon                        string   `protobuf:"bytes,18,opt,name=icon,proto3" json:"icon,omitempty"`
	MoonPhase                   float64  `protobuf:"fixed64,19,opt,name=moon_phase,json=moonPhase,proto3" json:"moon_phase,omitempty"`
	Ozone                       float64  `protobuf:"fixed64,20,opt,name=ozone,proto3" json:"ozone,omitempty"`
	PrecipIntensity             float64  `protobuf:"fixed64,21,opt,name=precip_intensity,json=precipIntensity,proto3" json:"precip_intensity,omitempty"`
	PrecipIntensityMax          float64  `protobuf:"fixed64,22,opt,name=precip_intensity_max,json=precipIntensityMax,proto3" json:"precip_intensity_max,omitempty"`
	PrecipIntensityMaxTime      int64    `protobuf:"varint,23,opt,name=precip_intensity_max_time,json=precipIntensityMaxTime,proto3" json:"precip_intensity_max_time,omitempty"`
	PrecipProbability           float64  `protobuf:"fixed64,24,opt,name=precip_probability,json=precipProbability,proto3" json:"precip_probability,omitempty"`
	PrecipType                  string   `protobuf:"bytes,25,opt,name=precip_type,json=precipType,proto3" json:"precip_type,omitempty"`
	Pressure                    float64  `protobuf:"fixed64,26,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Summary                     string   `protobuf:"bytes,27,opt,name=summary,proto3" json:"summary,omitempty"`
	SunriseTime                 int64    `protobuf:"varint,28,opt,name=sunrise_time,json=sunriseTime,proto3" json:"sunrise_time,omitempty"`
	SunsetTime                  int64    `protobuf:"varint,29,opt,name=sunset_time,json=sunsetTime,proto3" json:"sunset_time,omitempty"`
	TemperatureHigh             float64  `protobuf:"fixed64,30,opt,name=temperature_high,json=temperatureHigh,proto3" json:"temperature_high,omitempty"`
	TemperatureHighTime         int64    `protobuf:"varint,31,opt,name=temperature_high_time,json=temperatureHighTime,proto3" json:"temperature_high_time,omitempty"`
	TemperatureLow              float64  `protobuf:"fixed64,32,opt,name=temperature_low,json=temperatureLow,proto3" json:"temperature_low,omitempty"`
	TemperatureLowTime          int64    `protobuf:"varint,33,opt,name=temperature_low_time,json=temperatureLowTime,proto3" json:"temperature_low_time,omitempty"`
	TemperatureMax              float64  `protobuf:"fixed64,34,opt,name=temperature_max,json=temperatureMax,proto3" json:"temperature_max,omitempty"`
	TemperatureMaxTime          int64    `protobuf:"varint,35,opt,name=temperature_max_time,json=temperatureMaxTime,proto3" json:"temperature_max_time,omitempty"`
	TemperatureMin              float64  `protobuf:"fixed64,36,opt,name=temperature_min,json=temperatureMin,proto3" json:"temperature_min,omitempty"`
	TemperatureMinTime          int64    `protobuf:"varint,37,opt,name=temperature_min_time,json=temperatureMinTime,proto3" json:"temperature_min_time,omitempty"`
	Time                        int64    `protobuf:"varint,38,opt,name=time,proto3" json:"time,omitempty"`
	UvIndex                     int64    `protobuf:"varint,39,opt,name=uv_index,json=uvIndex,proto3" json:"uv_index,omitempty"`
	UvIndexTime                 int64    `protobuf:"varint,40,opt,name=uv_index_time,json=uvIndexTime,proto3" json:"uv_index_time,omitempty"`
	Visibility                  float64  `protobuf:"fixed64,41,opt,name=visibility,proto3" json:"visibility,omitempty"`
	WindBearing                 int64    `protobuf:"varint,42,opt,name=wind_bearing,json=windBearing,proto3" json:"wind_bearing,omitempty"`
	WindGust                    float64  `protobuf:"fixed64,43,opt,name=wind_gust,json=windGust,proto3" json:"wind_gust,omitempty"`
	WindGustTime                int64    `protobuf:"varint,44,opt,name=wind_gust_time,json=windGustTime,proto3" json:"wind_gust_time,omitempty"`
	WindSpeed                   float64  `protobuf:"fixed64,45,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_data_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_UNKNOWN
}

func (x *Data) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Data) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Data) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Data) GetApparentTemperatureHigh() float64 {
	if x != nil {
		return x.ApparentTemperatureHigh
	}
	return 0
}

func (x *Data) GetApparentTemperatureHighTime() int64 {
	if x != nil {
		return x.ApparentTemperatureHighTime
	}
	return 0
}

func (x *Data) GetApparentTemperatureLow() float64 {
	if x != nil {
		return x.ApparentTemperatureLow
	}
	return 0
}

func (x *Data) GetApparentTemperatureLowTime() int64 {
	if x != nil {
		return x.ApparentTemperatureLowTime
	}
	return 0
}

func (x *Data) GetApparentTemperatureMax() float64 {
	if x != nil {
		return x.ApparentTemperatureMax
	}
	return 0
}

func (x *Data) GetApparentTemperatureMaxTime() int64 {
	if x != nil {
		return x.ApparentTemperatureMaxTime
	}
	return 0
}

func (x *Data) GetApparentTemperatureMin() float64 {
	if x != nil {
		return x.ApparentTemperatureMin
	}
	return 0
}

func (x *Data) GetApparentTemperatureMinTime() int64 {
	if x != nil {
		return x.ApparentTemperatureMinTime
	}
	return 0
}

func (x *Data) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Data) GetApparentTemperature() float64 {
	if x != nil {
		return x.ApparentTemperature
	}
	return 0
}

func (x *Data) GetCloudCover() float64 {
	if x != nil {
		return x.CloudCover
	}
	return 0
}

func (x *Data) GetDewPoint() float64 {
	if x != nil {
		return x.DewPoint
	}
	return 0
}

func (x *Data) GetHumidity() float64 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *Data) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Data) GetMoonPhase() float64 {
	if x != nil {
		return x.MoonPhase
	}
	return 0
}

func (x *Data) GetOzone() float64 {
	if x != nil {
		return x.Ozone
	}
	return 0
}

func (x *Data) GetPrecipIntensity() float64 {
	if x != nil {
		return x.PrecipIntensity
	}
	return 0
}

func (x *Data) GetPrecipIntensityMax() float64 {
	if x != nil {
		return x.PrecipIntensityMax
	}
	return 0
}

func (x *Data) GetPrecipIntensityMaxTime() int64 {
	if x != nil {
		return x.PrecipIntensityMaxTime
	}
	return 0
}

func (x *Data) GetPrecipProbability() float64 {
	if x != nil {
		return x.PrecipProbability
	}
	return 0
}

func (x *Data) GetPrecipType() string {
	if x != nil {
		return x.PrecipType
	}
	return ""
}

func (x *Data) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Data) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Data) GetSunriseTime() int64 {
	if x != nil {
		return x.SunriseTime
	}
	return 0
}

func (x *Data) GetSunsetTime() int64 {
	if x != nil {
		return x.SunsetTime
	}
	return 0
}

func (x *Data) GetTemperatureHigh() float64 {
	if x != nil {
		return x.TemperatureHigh
	}
	return 0
}

func (x *Data) GetTemperatureHighTime() int64 {
	if x != nil {
		return x.TemperatureHighTime
	}
	return 0
}

func (x *Data) GetTemperatureLow() float64 {
	if x != nil {
		return x.TemperatureLow
	}
	return 0
}

func (x *Data) GetTemperatureLowTime() int64 {
	if x != nil {
		return x.TemperatureLowTime
	}
	return 0
}

func (x *Data) GetTemperatureMax() float64 {
	if x != nil {
		return x.TemperatureMax
	}
	return 0
}

func (x *Data) GetTemperatureMaxTime() int64 {
	if x != nil {
		return x.TemperatureMaxTime
	}
	return 0
}

func (x *Data) GetTemperatureMin() float64 {
	if x != nil {
		return x.TemperatureMin
	}
	return 0
}

func (x *Data) GetTemperatureMinTime() int64 {
	if x != nil {
		return x.TemperatureMinTime
	}
	return 0
}

func (x *Data) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Data) GetUvIndex() int64 {
	if x != nil {
		return x.UvIndex
	}
	return 0
}

func (x *Data) GetUvIndexTime() int64 {
	if x != nil {
		return x.UvIndexTime
	}
	return 0
}

func (x *Data) GetVisibility() float64 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *Data) GetWindBearing() int64 {
	if x != nil {
		return x.WindBearing
	}
	return 0
}

func (x *Data) GetWindGust() float64 {
	if x != nil {
		return x.WindGust
	}
	return 0
}

func (x *Data) GetWindGustTime() int64 {
	if x != nil {
		return x.WindGustTime
	}
	return 0
}

func (x *Data) GetWindSpeed() float64 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

var File_data_data_proto protoreflect.FileDescriptor

var file_data_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x0e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x61, 0x70, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x70, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f,
	0x77, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x41,
	0x0a, 0x1d, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x61,
	0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x6e, 0x72,
	0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x76, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x2a, 0x49, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x04, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6e, 0x69, 0x6c, 0x76,
	0x70, 0x65, 0x74, 0x72, 0x6f, 0x76, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_data_data_proto_rawDescOnce sync.Once
	file_data_data_proto_rawDescData = file_data_data_proto_rawDesc
)

func file_data_data_proto_rawDescGZIP() []byte {
	file_data_data_proto_rawDescOnce.Do(func() {
		file_data_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_data_proto_rawDescData)
	})
	return file_data_data_proto_rawDescData
}

var file_data_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_data_data_proto_goTypes = []interface{}{
	(DataType)(0), // 0: weathersource.data.DataType
	(*Data)(nil),  // 1: weathersource.data.Data
}
var file_data_data_proto_depIdxs = []int32{
	0, // 0: weathersource.data.Data.type:type_name -> weathersource.data.DataType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_data_data_proto_init() }
func file_data_data_proto_init() {
	if File_data_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_data_proto_goTypes,
		DependencyIndexes: file_data_data_proto_depIdxs,
		EnumInfos:         file_data_data_proto_enumTypes,
		MessageInfos:      file_data_data_proto_msgTypes,
	}.Build()
	File_data_data_proto = out.File
	file_data_data_proto_rawDesc = nil
	file_data_data_proto_goTypes = nil
	file_data_data_proto_depIdxs = nil
}
