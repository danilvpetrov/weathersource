// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data/data.proto

package data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DataType_UNKNOWN  DataType = 0
	DataType_CURRENT  DataType = 1
	DataType_MINUTELY DataType = 2
	DataType_HOURLY   DataType = 3
	DataType_DAILY    DataType = 4
)

var DataType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CURRENT",
	2: "MINUTELY",
	3: "HOURLY",
	4: "DAILY",
}

var DataType_value = map[string]int32{
	"UNKNOWN":  0,
	"CURRENT":  1,
	"MINUTELY": 2,
	"HOURLY":   3,
	"DAILY":    4,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_48e8d492558f417f, []int{0}
}

// Data is the collection of weather information received from
// https://api.darksky.net.
type Data struct {
	Type                        DataType `protobuf:"varint,1,opt,name=type,proto3,enum=weathersource.data.DataType" json:"type,omitempty"`
	Latitude                    float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                   float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Timezone                    string   `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	ApparentTemperatureHigh     float64  `protobuf:"fixed64,5,opt,name=apparent_temperature_high,json=apparentTemperatureHigh,proto3" json:"apparent_temperature_high,omitempty"`
	ApparentTemperatureHighTime int64    `protobuf:"varint,6,opt,name=apparent_temperature_high_time,json=apparentTemperatureHighTime,proto3" json:"apparent_temperature_high_time,omitempty"`
	ApparentTemperatureLow      float64  `protobuf:"fixed64,7,opt,name=apparent_temperature_low,json=apparentTemperatureLow,proto3" json:"apparent_temperature_low,omitempty"`
	ApparentTemperatureLowTime  int64    `protobuf:"varint,8,opt,name=apparent_temperature_low_time,json=apparentTemperatureLowTime,proto3" json:"apparent_temperature_low_time,omitempty"`
	ApparentTemperatureMax      float64  `protobuf:"fixed64,9,opt,name=apparent_temperature_max,json=apparentTemperatureMax,proto3" json:"apparent_temperature_max,omitempty"`
	ApparentTemperatureMaxTime  int64    `protobuf:"varint,10,opt,name=apparent_temperature_max_time,json=apparentTemperatureMaxTime,proto3" json:"apparent_temperature_max_time,omitempty"`
	ApparentTemperatureMin      float64  `protobuf:"fixed64,11,opt,name=apparent_temperature_min,json=apparentTemperatureMin,proto3" json:"apparent_temperature_min,omitempty"`
	ApparentTemperatureMinTime  int64    `protobuf:"varint,12,opt,name=apparent_temperature_min_time,json=apparentTemperatureMinTime,proto3" json:"apparent_temperature_min_time,omitempty"`
	Temperature                 float64  `protobuf:"fixed64,13,opt,name=temperature,proto3" json:"temperature,omitempty"`
	ApparentTemperature         float64  `protobuf:"fixed64,14,opt,name=apparent_temperature,json=apparentTemperature,proto3" json:"apparent_temperature,omitempty"`
	CloudCover                  float64  `protobuf:"fixed64,15,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	DewPoint                    float64  `protobuf:"fixed64,16,opt,name=dew_point,json=dewPoint,proto3" json:"dew_point,omitempty"`
	Humidity                    float64  `protobuf:"fixed64,17,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Icon                        string   `protobuf:"bytes,18,opt,name=icon,proto3" json:"icon,omitempty"`
	MoonPhase                   float64  `protobuf:"fixed64,19,opt,name=moon_phase,json=moonPhase,proto3" json:"moon_phase,omitempty"`
	Ozone                       float64  `protobuf:"fixed64,20,opt,name=ozone,proto3" json:"ozone,omitempty"`
	PrecipIntensity             float64  `protobuf:"fixed64,21,opt,name=precip_intensity,json=precipIntensity,proto3" json:"precip_intensity,omitempty"`
	PrecipIntensityMax          float64  `protobuf:"fixed64,22,opt,name=precip_intensity_max,json=precipIntensityMax,proto3" json:"precip_intensity_max,omitempty"`
	PrecipIntensityMaxTime      int64    `protobuf:"varint,23,opt,name=precip_intensity_max_time,json=precipIntensityMaxTime,proto3" json:"precip_intensity_max_time,omitempty"`
	PrecipProbability           float64  `protobuf:"fixed64,24,opt,name=precip_probability,json=precipProbability,proto3" json:"precip_probability,omitempty"`
	PrecipType                  string   `protobuf:"bytes,25,opt,name=precip_type,json=precipType,proto3" json:"precip_type,omitempty"`
	Pressure                    float64  `protobuf:"fixed64,26,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Summary                     string   `protobuf:"bytes,27,opt,name=summary,proto3" json:"summary,omitempty"`
	SunriseTime                 int64    `protobuf:"varint,28,opt,name=sunrise_time,json=sunriseTime,proto3" json:"sunrise_time,omitempty"`
	SunsetTime                  int64    `protobuf:"varint,29,opt,name=sunset_time,json=sunsetTime,proto3" json:"sunset_time,omitempty"`
	TemperatureHigh             float64  `protobuf:"fixed64,30,opt,name=temperature_high,json=temperatureHigh,proto3" json:"temperature_high,omitempty"`
	TemperatureHighTime         int64    `protobuf:"varint,31,opt,name=temperature_high_time,json=temperatureHighTime,proto3" json:"temperature_high_time,omitempty"`
	TemperatureLow              float64  `protobuf:"fixed64,32,opt,name=temperature_low,json=temperatureLow,proto3" json:"temperature_low,omitempty"`
	TemperatureLowTime          int64    `protobuf:"varint,33,opt,name=temperature_low_time,json=temperatureLowTime,proto3" json:"temperature_low_time,omitempty"`
	TemperatureMax              float64  `protobuf:"fixed64,34,opt,name=temperature_max,json=temperatureMax,proto3" json:"temperature_max,omitempty"`
	TemperatureMaxTime          int64    `protobuf:"varint,35,opt,name=temperature_max_time,json=temperatureMaxTime,proto3" json:"temperature_max_time,omitempty"`
	TemperatureMin              float64  `protobuf:"fixed64,36,opt,name=temperature_min,json=temperatureMin,proto3" json:"temperature_min,omitempty"`
	TemperatureMinTime          int64    `protobuf:"varint,37,opt,name=temperature_min_time,json=temperatureMinTime,proto3" json:"temperature_min_time,omitempty"`
	Time                        int64    `protobuf:"varint,38,opt,name=time,proto3" json:"time,omitempty"`
	UvIndex                     int64    `protobuf:"varint,39,opt,name=uv_index,json=uvIndex,proto3" json:"uv_index,omitempty"`
	UvIndexTime                 int64    `protobuf:"varint,40,opt,name=uv_index_time,json=uvIndexTime,proto3" json:"uv_index_time,omitempty"`
	Visibility                  float64  `protobuf:"fixed64,41,opt,name=visibility,proto3" json:"visibility,omitempty"`
	WindBearing                 int64    `protobuf:"varint,42,opt,name=wind_bearing,json=windBearing,proto3" json:"wind_bearing,omitempty"`
	WindGust                    float64  `protobuf:"fixed64,43,opt,name=wind_gust,json=windGust,proto3" json:"wind_gust,omitempty"`
	WindGustTime                int64    `protobuf:"varint,44,opt,name=wind_gust_time,json=windGustTime,proto3" json:"wind_gust_time,omitempty"`
	WindSpeed                   float64  `protobuf:"fixed64,45,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_48e8d492558f417f, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_UNKNOWN
}

func (m *Data) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Data) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Data) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Data) GetApparentTemperatureHigh() float64 {
	if m != nil {
		return m.ApparentTemperatureHigh
	}
	return 0
}

func (m *Data) GetApparentTemperatureHighTime() int64 {
	if m != nil {
		return m.ApparentTemperatureHighTime
	}
	return 0
}

func (m *Data) GetApparentTemperatureLow() float64 {
	if m != nil {
		return m.ApparentTemperatureLow
	}
	return 0
}

func (m *Data) GetApparentTemperatureLowTime() int64 {
	if m != nil {
		return m.ApparentTemperatureLowTime
	}
	return 0
}

func (m *Data) GetApparentTemperatureMax() float64 {
	if m != nil {
		return m.ApparentTemperatureMax
	}
	return 0
}

func (m *Data) GetApparentTemperatureMaxTime() int64 {
	if m != nil {
		return m.ApparentTemperatureMaxTime
	}
	return 0
}

func (m *Data) GetApparentTemperatureMin() float64 {
	if m != nil {
		return m.ApparentTemperatureMin
	}
	return 0
}

func (m *Data) GetApparentTemperatureMinTime() int64 {
	if m != nil {
		return m.ApparentTemperatureMinTime
	}
	return 0
}

func (m *Data) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Data) GetApparentTemperature() float64 {
	if m != nil {
		return m.ApparentTemperature
	}
	return 0
}

func (m *Data) GetCloudCover() float64 {
	if m != nil {
		return m.CloudCover
	}
	return 0
}

func (m *Data) GetDewPoint() float64 {
	if m != nil {
		return m.DewPoint
	}
	return 0
}

func (m *Data) GetHumidity() float64 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func (m *Data) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Data) GetMoonPhase() float64 {
	if m != nil {
		return m.MoonPhase
	}
	return 0
}

func (m *Data) GetOzone() float64 {
	if m != nil {
		return m.Ozone
	}
	return 0
}

func (m *Data) GetPrecipIntensity() float64 {
	if m != nil {
		return m.PrecipIntensity
	}
	return 0
}

func (m *Data) GetPrecipIntensityMax() float64 {
	if m != nil {
		return m.PrecipIntensityMax
	}
	return 0
}

func (m *Data) GetPrecipIntensityMaxTime() int64 {
	if m != nil {
		return m.PrecipIntensityMaxTime
	}
	return 0
}

func (m *Data) GetPrecipProbability() float64 {
	if m != nil {
		return m.PrecipProbability
	}
	return 0
}

func (m *Data) GetPrecipType() string {
	if m != nil {
		return m.PrecipType
	}
	return ""
}

func (m *Data) GetPressure() float64 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func (m *Data) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Data) GetSunriseTime() int64 {
	if m != nil {
		return m.SunriseTime
	}
	return 0
}

func (m *Data) GetSunsetTime() int64 {
	if m != nil {
		return m.SunsetTime
	}
	return 0
}

func (m *Data) GetTemperatureHigh() float64 {
	if m != nil {
		return m.TemperatureHigh
	}
	return 0
}

func (m *Data) GetTemperatureHighTime() int64 {
	if m != nil {
		return m.TemperatureHighTime
	}
	return 0
}

func (m *Data) GetTemperatureLow() float64 {
	if m != nil {
		return m.TemperatureLow
	}
	return 0
}

func (m *Data) GetTemperatureLowTime() int64 {
	if m != nil {
		return m.TemperatureLowTime
	}
	return 0
}

func (m *Data) GetTemperatureMax() float64 {
	if m != nil {
		return m.TemperatureMax
	}
	return 0
}

func (m *Data) GetTemperatureMaxTime() int64 {
	if m != nil {
		return m.TemperatureMaxTime
	}
	return 0
}

func (m *Data) GetTemperatureMin() float64 {
	if m != nil {
		return m.TemperatureMin
	}
	return 0
}

func (m *Data) GetTemperatureMinTime() int64 {
	if m != nil {
		return m.TemperatureMinTime
	}
	return 0
}

func (m *Data) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Data) GetUvIndex() int64 {
	if m != nil {
		return m.UvIndex
	}
	return 0
}

func (m *Data) GetUvIndexTime() int64 {
	if m != nil {
		return m.UvIndexTime
	}
	return 0
}

func (m *Data) GetVisibility() float64 {
	if m != nil {
		return m.Visibility
	}
	return 0
}

func (m *Data) GetWindBearing() int64 {
	if m != nil {
		return m.WindBearing
	}
	return 0
}

func (m *Data) GetWindGust() float64 {
	if m != nil {
		return m.WindGust
	}
	return 0
}

func (m *Data) GetWindGustTime() int64 {
	if m != nil {
		return m.WindGustTime
	}
	return 0
}

func (m *Data) GetWindSpeed() float64 {
	if m != nil {
		return m.WindSpeed
	}
	return 0
}

func init() {
	proto.RegisterEnum("weathersource.data.DataType", DataType_name, DataType_value)
	proto.RegisterType((*Data)(nil), "weathersource.data.Data")
}

func init() {
	proto.RegisterFile("data/data.proto", fileDescriptor_48e8d492558f417f)
}

var fileDescriptor_48e8d492558f417f = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdf, 0x73, 0xda, 0x46,
	0x10, 0x2e, 0x31, 0xb6, 0x61, 0x71, 0xb0, 0x72, 0x26, 0xce, 0xf9, 0x37, 0x71, 0xd3, 0x06, 0xbb,
	0x09, 0x76, 0xd3, 0x97, 0xb6, 0x6f, 0x89, 0x93, 0x69, 0x98, 0xda, 0xc4, 0x43, 0x61, 0x3a, 0xee,
	0x8b, 0xe6, 0x40, 0x37, 0x70, 0x33, 0xe8, 0x4e, 0x23, 0x9d, 0xf8, 0xd1, 0xbf, 0xb0, 0x7f, 0x56,
	0xe7, 0xf6, 0x10, 0x24, 0x48, 0xf2, 0x0b, 0xc3, 0x7e, 0xfb, 0xed, 0xf7, 0xdd, 0x68, 0xf7, 0xf6,
	0x60, 0xd7, 0x63, 0x9a, 0x5d, 0x99, 0x9f, 0x66, 0x10, 0x2a, 0xad, 0x08, 0x99, 0x72, 0xa6, 0x47,
	0x3c, 0x8c, 0x54, 0x1c, 0x0e, 0x78, 0xd3, 0x64, 0xce, 0xff, 0xab, 0x42, 0xf1, 0x23, 0xd3, 0x8c,
	0x5c, 0x43, 0x51, 0xcf, 0x03, 0x4e, 0x0b, 0xf5, 0x42, 0xa3, 0xfa, 0xee, 0xb8, 0x99, 0xe6, 0x36,
	0x0d, 0xaf, 0x3b, 0x0f, 0x78, 0x07, 0x99, 0xe4, 0x10, 0x4a, 0x63, 0xa6, 0x85, 0x8e, 0x3d, 0x4e,
	0x9f, 0xd4, 0x0b, 0x8d, 0x42, 0x67, 0x19, 0x93, 0x63, 0x28, 0x8f, 0x95, 0x1c, 0xda, 0xe4, 0x06,
	0x26, 0x57, 0x80, 0xa9, 0xd4, 0xc2, 0xe7, 0xff, 0x2a, 0xc9, 0x69, 0xb1, 0x5e, 0x68, 0x94, 0x3b,
	0xcb, 0x98, 0xfc, 0x0e, 0x07, 0x2c, 0x08, 0x58, 0xc8, 0xa5, 0x76, 0x35, 0xf7, 0x03, 0x1e, 0x32,
	0x1d, 0x87, 0xdc, 0x1d, 0x89, 0xe1, 0x88, 0x6e, 0xa2, 0xd2, 0x8b, 0x84, 0xd0, 0x5d, 0xe5, 0x3f,
	0x8b, 0xe1, 0x88, 0xdc, 0xc0, 0x69, 0x6e, 0xad, 0x6b, 0x1c, 0xe8, 0x56, 0xbd, 0xd0, 0xd8, 0xe8,
	0x1c, 0xe5, 0x08, 0x74, 0x85, 0xcf, 0xc9, 0xaf, 0x40, 0x33, 0x45, 0xc6, 0x6a, 0x4a, 0xb7, 0xd1,
	0x7f, 0x3f, 0xa3, 0xfc, 0x56, 0x4d, 0xc9, 0x7b, 0x38, 0xc9, 0xab, 0xb4, 0xee, 0x25, 0x74, 0x3f,
	0xcc, 0x2e, 0x7f, 0xd4, 0xdc, 0x67, 0x33, 0x5a, 0xce, 0x35, 0xbf, 0x63, 0xb3, 0x5c, 0x73, 0x9f,
	0xcd, 0xac, 0x39, 0xe4, 0x9a, 0xdf, 0xb1, 0xd9, 0xe3, 0xe6, 0x42, 0xd2, 0x4a, 0xbe, 0xb9, 0x90,
	0xf9, 0xe6, 0x42, 0x5a, 0xf3, 0x9d, 0x7c, 0x73, 0x21, 0xd1, 0xbc, 0x0e, 0x95, 0xaf, 0x2a, 0xe9,
	0x53, 0xf4, 0xfb, 0x1a, 0x22, 0x3f, 0x43, 0x2d, 0xcb, 0x84, 0x56, 0x91, 0xba, 0x97, 0xa1, 0x4d,
	0xce, 0xa0, 0x32, 0x18, 0xab, 0xd8, 0x73, 0x07, 0x6a, 0xc2, 0x43, 0xba, 0x8b, 0x4c, 0x40, 0xe8,
	0xc6, 0x20, 0xe4, 0x08, 0xca, 0x1e, 0x9f, 0xba, 0x81, 0x12, 0x52, 0x53, 0xc7, 0x0e, 0xb1, 0xc7,
	0xa7, 0xf7, 0x26, 0x36, 0x63, 0x3a, 0x8a, 0x7d, 0xe1, 0x09, 0x3d, 0xa7, 0xcf, 0x6c, 0x2e, 0x89,
	0x09, 0x81, 0xa2, 0x18, 0x28, 0x49, 0x09, 0x8e, 0x2f, 0xfe, 0x27, 0x27, 0x00, 0xbe, 0x52, 0xd2,
	0x0d, 0x46, 0x2c, 0xe2, 0x74, 0xcf, 0x4e, 0xbd, 0x41, 0xee, 0x0d, 0x40, 0x6a, 0xb0, 0xa9, 0x70,
	0xe4, 0x6b, 0x98, 0xb1, 0x01, 0xb9, 0x00, 0x27, 0x08, 0xf9, 0x40, 0x04, 0xae, 0x90, 0x9a, 0xcb,
	0xc8, 0x98, 0x3d, 0x47, 0xc2, 0xae, 0xc5, 0x5b, 0x09, 0x4c, 0xae, 0xa1, 0xb6, 0x4e, 0xc5, 0xc1,
	0xd8, 0x47, 0x3a, 0x59, 0xa3, 0x9b, 0xa1, 0xf8, 0x0d, 0x0e, 0xb2, 0x2a, 0x6c, 0x4f, 0x5e, 0x60,
	0x4f, 0xf6, 0xd3, 0x65, 0xd8, 0x8f, 0xb7, 0xb0, 0x10, 0x74, 0x83, 0x50, 0xf5, 0x59, 0x5f, 0x8c,
	0xcd, 0xc9, 0x28, 0x5a, 0x3d, 0xb3, 0x99, 0xfb, 0x55, 0xc2, 0x7c, 0xe9, 0x05, 0x1d, 0xb7, 0xc8,
	0x01, 0x7e, 0x16, 0xb0, 0x50, 0x77, 0xb1, 0x2d, 0x82, 0x90, 0x47, 0x91, 0xe9, 0xd8, 0xa1, 0xfd,
	0x98, 0x49, 0x4c, 0x28, 0x6c, 0x47, 0xb1, 0xef, 0xb3, 0x70, 0x4e, 0x8f, 0xb0, 0x30, 0x09, 0xc9,
	0x4b, 0xd8, 0x89, 0x62, 0x19, 0x8a, 0x88, 0xdb, 0x33, 0x1f, 0xe3, 0x99, 0x2b, 0x0b, 0x0c, 0x0f,
	0x7a, 0x06, 0x26, 0x8c, 0xb8, 0xb6, 0x8c, 0x13, 0x64, 0x80, 0x85, 0x90, 0x70, 0x01, 0x4e, 0x6a,
	0x91, 0x9c, 0xda, 0x2f, 0xac, 0xd7, 0x16, 0xc8, 0x3b, 0x78, 0x9e, 0xbd, 0x37, 0xce, 0x50, 0x75,
	0x4f, 0x67, 0xec, 0x8b, 0xd7, 0xb0, 0xbb, 0xbe, 0x26, 0xea, 0xa8, 0x5e, 0xd5, 0xdf, 0xae, 0x87,
	0x6b, 0xa8, 0x65, 0x6e, 0x85, 0x97, 0xa8, 0x4d, 0x74, 0x7a, 0x1b, 0xac, 0x49, 0x9b, 0x5e, 0x9f,
	0xa7, 0xa4, 0x4d, 0x9f, 0xd7, 0xa4, 0x97, 0x2d, 0xfe, 0x3e, 0x25, 0x9d, 0xb4, 0x77, 0x5d, 0x5a,
	0x48, 0xfa, 0x2a, 0x2d, 0x2d, 0x64, 0x4a, 0x3a, 0xb9, 0xd1, 0x3f, 0xa4, 0xa5, 0x17, 0x37, 0x99,
	0x40, 0x11, 0x19, 0x3f, 0x22, 0x03, 0xff, 0x93, 0x03, 0x28, 0xc5, 0x13, 0x57, 0x48, 0x8f, 0xcf,
	0xe8, 0x6b, 0xc4, 0xb7, 0xe3, 0x49, 0xcb, 0x84, 0xe4, 0x1c, 0x9e, 0x26, 0x29, 0xab, 0xdc, 0xb0,
	0x3d, 0x5e, 0xe4, 0x51, 0xf2, 0x14, 0x60, 0x22, 0x22, 0xb1, 0x18, 0xc2, 0x0b, 0x7b, 0x8d, 0x57,
	0x88, 0x19, 0x93, 0xa9, 0x90, 0x9e, 0xdb, 0xe7, 0x2c, 0x14, 0x72, 0x48, 0x2f, 0xad, 0x84, 0xc1,
	0x3e, 0x58, 0xc8, 0xdc, 0x74, 0xa4, 0x0c, 0xe3, 0x48, 0xd3, 0x9f, 0xec, 0x00, 0x1a, 0xe0, 0x8f,
	0x38, 0xd2, 0xe4, 0x15, 0x54, 0x97, 0x49, 0x7b, 0x88, 0x37, 0xa8, 0xb0, 0x93, 0x30, 0xf0, 0x14,
	0x27, 0x00, 0xc8, 0x8a, 0x02, 0xce, 0x3d, 0xfa, 0xd6, 0xde, 0x6f, 0x83, 0xfc, 0x65, 0x80, 0xcb,
	0x16, 0x94, 0x92, 0x17, 0x92, 0x54, 0x60, 0xbb, 0xd7, 0xfe, 0xb3, 0xfd, 0xe5, 0xef, 0xb6, 0xf3,
	0x9d, 0x09, 0x6e, 0x7a, 0x9d, 0xce, 0xa7, 0x76, 0xd7, 0x29, 0x90, 0x1d, 0x28, 0xdd, 0xb5, 0xda,
	0xbd, 0xee, 0xa7, 0xdb, 0x07, 0xe7, 0x09, 0x01, 0xd8, 0xfa, 0xfc, 0xa5, 0xd7, 0xb9, 0x7d, 0x70,
	0x36, 0x48, 0x19, 0x36, 0x3f, 0xbe, 0x6f, 0xdd, 0x3e, 0x38, 0xc5, 0x0f, 0x6f, 0xfe, 0xb9, 0x1c,
	0x0a, 0x3d, 0x8a, 0xfb, 0xcd, 0x81, 0xf2, 0xaf, 0x3c, 0x26, 0xc5, 0x78, 0x12, 0x70, 0x1d, 0xaa,
	0xc9, 0xd5, 0x37, 0xef, 0x32, 0xbe, 0xee, 0xfd, 0x2d, 0x7c, 0xde, 0x7f, 0xf9, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x74, 0xb8, 0x40, 0xf1, 0x07, 0x00, 0x00,
}
